{"version":3,"file":"sidenav.spec.js","sourceRoot":"","sources":["../../Users/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-lnaCBdnQ.tmp/0/src/demo-app/components/sidenav/sidenav.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  fakeAsync,\n  inject,\n  injectAsync,\n  tick\n} from '@angular/core/testing';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {XHR} from '@angular/compiler';\nimport {\n  Component,\n  Type,\n  ViewMetadata\n} from '@angular/core';\n\nimport {By} from '@angular/platform-browser';\nimport {MdSidenav, MdSidenavLayout, MD_SIDENAV_DIRECTIVES} from './sidenav';\n\n\nfunction fakeAsyncAdaptor(fn: () => void) {\n  return inject([], fakeAsync(fn));\n}\n\n\n/**\n * Create a ComponentFixture from the builder. This takes a template and a style for sidenav.\n */\nfunction createFixture(appType: Type, builder: TestComponentBuilder,\n                       template: string, style: string): ComponentFixture<any> {\n  let fixture: ComponentFixture<any> = null;\n  // Remove the styles (which remove the animations/transitions).\n  builder\n    .overrideView(MdSidenavLayout, new ViewMetadata({\n      template: template,\n      styles: [style],\n      directives: [MdSidenav],\n    }))\n    .createAsync(appType).then((f: ComponentFixture<any>) => {\n    fixture = f;\n  });\n  tick();\n\n  return fixture;\n}\n\n\nfunction endSidenavTransition(fixture: ComponentFixture<any>) {\n  let sidenav: any = fixture.debugElement.query(By.directive(MdSidenav)).componentInstance;\n  sidenav.onTransitionEnd({\n    target: (<any>sidenav)._elementRef.nativeElement,\n    propertyName: 'transform'\n  });\n  fixture.detectChanges();\n}\n\n\ndescribe('MdSidenav', () => {\n  let template: string;\n  let style: string;\n  let builder: TestComponentBuilder;\n\n  /**\n   * We need to get the template and styles for the sidenav in an Async test.\n   * FakeAsync would block indefinitely on the XHR if we were to create the component async-ly.\n   * See https://github.com/angular/angular/issues/5601.\n   * We do some style verification so styles have to match.\n   * But we remove the transitions so we only set the regular `sidenav.css` styling.\n   */\n  beforeEach(injectAsync([TestComponentBuilder, XHR], (tcb: TestComponentBuilder, xhr: XHR) => {\n    builder = tcb;\n\n    return Promise.all([\n      xhr.get('./components/sidenav/sidenav.html').then((t) => {\n        template = t;\n      }),\n      xhr.get('./components/sidenav/sidenav.css').then((css) => {\n        style = css;\n      })\n    ]).catch((err: any) => {\n      console.error(err);\n    });\n  }));\n\n  describe('methods', () => {\n    it('should be able to open and close', fakeAsyncAdaptor(() => {\n      let fixture = createFixture(BasicTestApp, builder, template, style);\n\n      let testComponent: BasicTestApp = fixture.debugElement.componentInstance;\n      let openButtonElement = fixture.debugElement.query(By.css('.open'));\n      openButtonElement.nativeElement.click();\n      fixture.detectChanges();\n      tick();\n\n      expect(testComponent.openStartCount).toBe(1);\n      expect(testComponent.openCount).toBe(0);\n\n      endSidenavTransition(fixture);\n      tick();\n\n      expect(testComponent.openStartCount).toBe(1);\n      expect(testComponent.openCount).toBe(1);\n      expect(testComponent.closeStartCount).toBe(0);\n      expect(testComponent.closeCount).toBe(0);\n\n      let sidenavElement = fixture.debugElement.query(By.css('md-sidenav'));\n      let sidenavBackdropElement = fixture.debugElement.query(By.css('.md-sidenav-backdrop'));\n      expect(getComputedStyle(sidenavElement.nativeElement).visibility).toEqual('visible');\n      expect(getComputedStyle(sidenavBackdropElement.nativeElement).visibility)\n        .toEqual('visible');\n\n      // Close it.\n      let closeButtonElement = fixture.debugElement.query(By.css('.close'));\n      closeButtonElement.nativeElement.click();\n      fixture.detectChanges();\n      tick();\n\n      expect(testComponent.openStartCount).toBe(1);\n      expect(testComponent.openCount).toBe(1);\n      expect(testComponent.closeStartCount).toBe(1);\n      expect(testComponent.closeCount).toBe(0);\n\n      endSidenavTransition(fixture);\n      tick();\n\n      expect(testComponent.openStartCount).toBe(1);\n      expect(testComponent.openCount).toBe(1);\n      expect(testComponent.closeStartCount).toBe(1);\n      expect(testComponent.closeCount).toBe(1);\n\n      expect(getComputedStyle(sidenavElement.nativeElement).visibility).toEqual('hidden');\n      expect(getComputedStyle(sidenavBackdropElement.nativeElement).visibility).toEqual('hidden');\n    }));\n\n    it('open/close() return a promise that resolves after animation end', fakeAsyncAdaptor(() => {\n      let fixture = createFixture(BasicTestApp, builder, template, style);\n      let sidenav: MdSidenav = fixture.debugElement\n        .query(By.directive(MdSidenav)).componentInstance;\n      let called = false;\n\n      sidenav.open().then(() => {\n        called = true;\n      });\n\n      expect(called).toBe(false);\n      endSidenavTransition(fixture);\n      tick();\n      expect(called).toBe(true);\n\n      called = false;\n      sidenav.close().then(() => {\n        called = true;\n      });\n\n      expect(called).toBe(false);\n      endSidenavTransition(fixture);\n      tick();\n      expect(called).toBe(true);\n\n    }));\n\n    it('open/close() twice returns the same promise', fakeAsyncAdaptor(() => {\n      let fixture = createFixture(BasicTestApp, builder, template, style);\n      let sidenav: MdSidenav = fixture.debugElement\n        .query(By.directive(MdSidenav)).componentInstance;\n\n      let promise = sidenav.open();\n      expect(sidenav.open()).toBe(promise);\n      fixture.detectChanges();\n      tick();\n\n      promise = sidenav.close();\n      expect(sidenav.close()).toBe(promise);\n      tick();\n    }));\n\n    it('open() then close() cancel animations when called too fast', fakeAsyncAdaptor(() => {\n      let fixture = createFixture(BasicTestApp, builder, template, style);\n      let sidenav: MdSidenav = fixture.debugElement\n        .query(By.directive(MdSidenav)).componentInstance;\n\n      let openCalled = false;\n      let openCancelled = false;\n      let closeCalled = false;\n\n      sidenav.open().then(() => {\n        openCalled = true;\n      }, () => {\n        openCancelled = true;\n      });\n\n      // We do not call transition end, close directly.\n      sidenav.close().then(() => {\n        closeCalled = true;\n      });\n\n      endSidenavTransition(fixture);\n      tick();\n\n      expect(openCalled).toBe(false);\n      expect(openCancelled).toBe(true);\n      expect(closeCalled).toBe(true);\n      tick();\n    }));\n\n    it('close() then open() cancel animations when called too fast', fakeAsyncAdaptor(() => {\n      let fixture = createFixture(BasicTestApp, builder, template, style);\n      let sidenav: MdSidenav = fixture.debugElement\n        .query(By.directive(MdSidenav)).componentInstance;\n\n      let closeCalled = false;\n      let closeCancelled = false;\n      let openCalled = false;\n\n      // First, open the sidenav completely.\n      sidenav.open();\n      endSidenavTransition(fixture);\n      tick();\n\n      // Then close and check behavior.\n      sidenav.close().then(() => {\n        closeCalled = true;\n      }, () => {\n        closeCancelled = true;\n      });\n      // We do not call transition end, open directly.\n      sidenav.open().then(() => {\n        openCalled = true;\n      });\n\n      endSidenavTransition(fixture);\n      tick();\n\n      expect(closeCalled).toBe(false);\n      expect(closeCancelled).toBe(true);\n      expect(openCalled).toBe(true);\n      tick();\n    }));\n\n    it('does not throw when created without a sidenav', fakeAsyncAdaptor(() => {\n      expect(() => {\n        let fixture = createFixture(SidenavLayoutNoSidenavTestApp, builder, template, style);\n        fixture.detectChanges();\n        tick();\n      }).not.toThrow();\n    }));\n\n    it('does throw when created with two sidenav on the same side', fakeAsyncAdaptor(() => {\n      expect(() => {\n        let fixture = createFixture(SidenavLayoutTwoSidenavTestApp, builder, template, style);\n        fixture.detectChanges();\n        tick();\n      }).toThrow();\n    }));\n  });\n\n  describe('attributes', () => {\n\n    it('should correctly parse opened=\"false\"', fakeAsyncAdaptor(() => {\n      let newBuilder = builder.overrideTemplate(BasicTestApp, `\n          <md-sidenav-layout>\n            <md-sidenav #sidenav mode=\"side\" opened=\"false\">\n              Closed Sidenav.\n            </md-sidenav>\n          </md-sidenav-layout>`);\n\n      let fixture = createFixture(BasicTestApp, newBuilder, template, style);\n      fixture.detectChanges();\n\n      let sidenavEl = fixture.debugElement.query(By.css('md-sidenav')).nativeElement;\n\n      expect(sidenavEl.classList).toContain('md-sidenav-closed');\n      expect(sidenavEl.classList).not.toContain('md-sidenav-opened');\n    }));\n\n    it('should correctly parse opened=\"true\"', fakeAsyncAdaptor(() => {\n      let newBuilder = builder.overrideTemplate(BasicTestApp, `\n          <md-sidenav-layout>\n            <md-sidenav #sidenav mode=\"side\" opened=\"true\">\n              Closed Sidenav.\n            </md-sidenav>\n          </md-sidenav-layout>`);\n\n      let fixture = createFixture(BasicTestApp, newBuilder, template, style);\n      fixture.detectChanges();\n\n      let sidenavEl = fixture.debugElement.query(By.css('md-sidenav')).nativeElement;\n\n      expect(sidenavEl.classList).not.toContain('md-sidenav-closed');\n      expect(sidenavEl.classList).toContain('md-sidenav-opened');\n    }));\n\n  });\n\n});\n\n\n/** Test component that contains an MdSidenavLayout but no MdSidenav. */\n@Component({\n  selector: 'test-app',\n  directives: [MD_SIDENAV_DIRECTIVES],\n  template: `\n    <md-sidenav-layout>\n    </md-sidenav-layout>\n  `,\n})\nclass SidenavLayoutNoSidenavTestApp {\n}\n\n\n/** Test component that contains an MdSidenavLayout and 2 MdSidenav on the same side. */\n@Component({\n  selector: 'test-app',\n  directives: [MD_SIDENAV_DIRECTIVES],\n  template: `\n    <md-sidenav-layout>\n      <md-sidenav> </md-sidenav>\n      <md-sidenav> </md-sidenav>\n    </md-sidenav-layout>\n  `,\n})\nclass SidenavLayoutTwoSidenavTestApp {\n}\n\n\n/** Test component that contains an MdSidenavLayout and one MdSidenav. */\n@Component({\n  selector: 'test-app',\n  directives: [MD_SIDENAV_DIRECTIVES],\n  template: `\n    <md-sidenav-layout>\n      <md-sidenav #sidenav align=\"start\"\n                  (open-start)=\"openStart()\"\n                  (open)=\"open()\"\n                  (close-start)=\"closeStart()\"\n                  (close)=\"close()\">\n        Content.\n      </md-sidenav>\n      <button (click)=\"sidenav.open()\" class=\"open\"></button>\n      <button (click)=\"sidenav.close()\" class=\"close\"></button>\n    </md-sidenav-layout>\n  `,\n})\nclass BasicTestApp {\n  openStartCount: number = 0;\n  openCount: number = 0;\n  closeStartCount: number = 0;\n  closeCount: number = 0;\n\n  openStart() {\n    this.openStartCount++;\n  }\n\n  open() {\n    this.openCount++;\n  }\n\n  closeStart() {\n    this.closeStartCount++;\n  }\n\n  close() {\n    this.closeCount++;\n  }\n}\n"]}