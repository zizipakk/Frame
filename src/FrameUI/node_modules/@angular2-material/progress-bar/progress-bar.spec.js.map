{"version":3,"file":"progress-bar.spec.js","sourceRoot":"","sources":["../../Users/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-lnaCBdnQ.tmp/0/src/demo-app/components/progress-bar/progress-bar.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {beforeEach, describe, expect, inject, it} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {Component} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MdProgressBar} from './progress-bar';\n\n\ndescribe('MdProgressBar', () => {\n  let builder: TestComponentBuilder;\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  it('should apply a mode of \"determinate\" if no mode is provided.', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n        expect(progressElement.componentInstance.mode).toBe('determinate');\n        done();\n      });\n  });\n\n  it('should not modify the mode if a valid mode is provided.', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-bar mode=\"buffer\"></md-progress-bar>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n        expect(progressElement.componentInstance.mode).toBe('buffer');\n        done();\n      });\n  });\n\n  it('should define default values for value and bufferValue attributes', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n        expect(progressElement.componentInstance.value).toBe(0);\n        expect(progressElement.componentInstance.bufferValue).toBe(0);\n        done();\n      });\n  });\n\n  it('should clamp value and bufferValue between 0 and 100', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n        let progressComponent = progressElement.componentInstance;\n\n        progressComponent.value = 50;\n        expect(progressComponent.value).toBe(50);\n\n        progressComponent.value = 999;\n        expect(progressComponent.value).toBe(100);\n\n        progressComponent.value = -10;\n        expect(progressComponent.value).toBe(0);\n\n        progressComponent.bufferValue = -29;\n        expect(progressComponent.bufferValue).toBe(0);\n\n        progressComponent.bufferValue = 9;\n        expect(progressComponent.bufferValue).toBe(9);\n\n        progressComponent.bufferValue = 1320;\n        expect(progressComponent.bufferValue).toBe(100);\n        done();\n      });\n  });\n\n  it('should return the transform attribute for bufferValue and mode', (done: () => void) => {\n    builder\n      .overrideTemplate(TestApp, '<md-progress-bar></md-progress-bar>')\n      .createAsync(TestApp)\n      .then((fixture) => {\n        fixture.detectChanges();\n        let progressElement = fixture.debugElement.query(By.css('md-progress-bar'));\n        let progressComponent = progressElement.componentInstance;\n\n        expect(progressComponent.primaryTransform()).toEqual({ transform: 'scaleX(0)' });\n        expect(progressComponent.bufferTransform()).toBe(undefined);\n\n        progressComponent.value = 40;\n        expect(progressComponent.primaryTransform()).toEqual({ transform: 'scaleX(0.4)' });\n        expect(progressComponent.bufferTransform()).toBe(undefined);\n\n        progressComponent.value = 35;\n        progressComponent.bufferValue = 55;\n        expect(progressComponent.primaryTransform()).toEqual({ transform: 'scaleX(0.35)' });\n        expect(progressComponent.bufferTransform()).toBe(undefined);\n\n        progressComponent.mode = 'buffer';\n        expect(progressComponent.primaryTransform()).toEqual({ transform: 'scaleX(0.35)' });\n        expect(progressComponent.bufferTransform()).toEqual({ transform: 'scaleX(0.55)' });\n\n\n        progressComponent.value = 60;\n        progressComponent.bufferValue = 60;\n        expect(progressComponent.primaryTransform()).toEqual({ transform: 'scaleX(0.6)' });\n        expect(progressComponent.bufferTransform()).toEqual({ transform: 'scaleX(0.6)' });\n        done();\n      });\n  });\n});\n\n\n/** Test component that contains an MdButton. */\n@Component({\n  directives: [MdProgressBar],\n  template: '',\n})\nclass TestApp {\n}\n"]}