{"version":3,"file":"list.spec.js","sourceRoot":"","sources":["../../Users/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-lnaCBdnQ.tmp/0/src/demo-app/components/list/list.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  expect,\n  beforeEach,\n  inject,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {Component} from '@angular/core';\nimport {By} from '@angular/platform-browser';\n\nimport {MD_LIST_DIRECTIVES, MdListItem} from './list';\n\ndescribe('MdList', () => {\n  let builder: TestComponentBuilder;\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  it('should add and remove focus class on focus/blur', () => {\n    var template = `\n        <md-list>\n          <a md-list-item>\n            Paprika\n          </a>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n        .createAsync(TestList).then((fixture) => {\n          let listItem = fixture.debugElement.query(By.directive(MdListItem));\n          let listItemDiv = fixture.debugElement.query(By.css('.md-list-item'));\n          fixture.detectChanges();\n          expect(listItemDiv.nativeElement.classList).not.toContain('md-list-item-focus');\n\n          listItem.componentInstance.handleFocus();\n          fixture.detectChanges();\n          expect(listItemDiv.nativeElement.classList).toContain('md-list-item-focus');\n\n          listItem.componentInstance.handleBlur();\n          fixture.detectChanges();\n          expect(listItemDiv.nativeElement.classList).not.toContain('md-list-item-focus');\n        });\n  });\n\n  it('should not apply any class to a list without lines', (done: () => void) => {\n    var template = `\n        <md-list>\n          <md-list-item>\n            Paprika\n          </md-list-item>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n      .createAsync(TestList).then((fixture) => {\n        let listItem = fixture.debugElement.query(By.css('md-list-item'));\n        fixture.detectChanges();\n        expect(listItem.nativeElement.className).toBe('');\n        done();\n      });\n  });\n\n  it('should apply md-2-line class to lists with two lines', (done: () => void) => {\n    var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            <img src=\"\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n          </md-list-item>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n      .createAsync(TestList).then((fixture) => {\n        fixture.detectChanges();\n        let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n        expect(listItems[0].nativeElement.className).toBe('md-2-line');\n        expect(listItems[1].nativeElement.className).toBe('md-2-line');\n        done();\n      });\n  });\n\n  it('should apply md-3-line class to lists with three lines', (done: () => void) => {\n    var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n            <p md-line>Some other text</p>\n          </md-list-item>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n      .createAsync(TestList).then((fixture) => {\n        fixture.detectChanges();\n        let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n        expect(listItems[0].nativeElement.className).toBe('md-3-line');\n        expect(listItems[1].nativeElement.className).toBe('md-3-line');\n        done();\n      });\n  });\n\n  it('should apply md-list-avatar class to list items with avatars', (done: () => void) => {\n    var template = `\n        <md-list>\n          <md-list-item>\n            <img src=\"\" md-list-avatar>\n            Paprika\n          </md-list-item>\n         <md-list-item>\n            Pepper\n          </md-list-item>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n      .createAsync(TestList).then((fixture) => {\n        fixture.detectChanges();\n        let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n        expect(listItems[0].nativeElement.className).toBe('md-list-avatar');\n        expect(listItems[1].nativeElement.className).toBe('');\n        done();\n      });\n  });\n\n  it('should not clear custom classes provided by user', (done: () => void) => {\n    var template = `\n        <md-list>\n          <md-list-item class=\"test-class\" *ngFor=\"let item of items\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n          </md-list-item>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n      .createAsync(TestList).then((fixture) => {\n        fixture.detectChanges();\n        let listItems = fixture.debugElement.children[0].queryAll(By.css('md-list-item'));\n        expect(listItems[0].nativeElement.classList.contains('test-class')).toBe(true);\n        done();\n      });\n  });\n\n  it('should update classes if number of lines change', (done: () => void) => {\n    var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            <h3 md-line>{{item.name}}</h3>\n            <p md-line>{{item.description}}</p>\n            <p md-line *ngIf=\"showThirdLine\">Some other text</p>\n          </md-list-item>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n      .createAsync(TestList).then((fixture) => {\n        fixture.debugElement.componentInstance.showThirdLine = false;\n        fixture.detectChanges();\n        let listItem = fixture.debugElement.children[0].query(By.css('md-list-item'));\n        expect(listItem.nativeElement.className).toBe('md-2-line');\n\n        fixture.debugElement.componentInstance.showThirdLine = true;\n        fixture.detectChanges();\n        setTimeout(() => {\n          expect(listItem.nativeElement.className).toBe('md-3-line');\n          done();\n        });\n      });\n  });\n\n  it('should add aria roles properly', (done: () => void) => {\n    var template = `\n        <md-list>\n          <md-list-item *ngFor=\"let item of items\">\n            {{item.name}}\n          </md-list-item>\n        </md-list>\n      `;\n    return builder.overrideTemplate(TestList, template)\n      .createAsync(TestList).then((fixture) => {\n        fixture.detectChanges();\n        let list = fixture.debugElement.children[0];\n        let listItem = fixture.debugElement.children[0].query(By.css('md-list-item'));\n        expect(list.nativeElement.getAttribute('role')).toBe('list');\n        expect(listItem.nativeElement.getAttribute('role')).toBe('listitem');\n        done();\n      });\n  });\n\n});\n\n@Component({\n  selector: 'test-list',\n  template: ``,\n  directives: [MD_LIST_DIRECTIVES]\n})\nclass TestList {\n  items: any[] = [\n    {'name': 'Paprika', 'description': 'A seasoning'},\n    {'name': 'Pepper', 'description': 'Another seasoning'}\n  ];\n  showThirdLine: boolean = false;\n}\n"]}