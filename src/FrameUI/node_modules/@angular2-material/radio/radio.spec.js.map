{"version":3,"file":"radio.spec.js","sourceRoot":"","sources":["../../Users/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-lnaCBdnQ.tmp/0/src/demo-app/components/radio/radio.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  it,\n  describe,\n  beforeEach,\n  beforeEachProviders,\n  inject,\n  async,\n  fakeAsync,\n  tick\n} from '@angular/core/testing';\nimport {FORM_DIRECTIVES, NgControl, disableDeprecatedForms, provideForms} from '@angular/forms';\nimport {TestComponentBuilder, ComponentFixture} from '@angular/compiler/testing';\nimport {Component, DebugElement, provide} from '@angular/core';\nimport {By} from '@angular/platform-browser';\nimport {MD_RADIO_DIRECTIVES, MdRadioGroup, MdRadioButton, MdRadioChange} from './radio';\nimport {\n  MdUniqueSelectionDispatcher\n} from '@angular2-material/core/coordination/unique-selection-dispatcher';\n\n\ndescribe('MdRadio', () => {\n  let builder: TestComponentBuilder;\n  let dispatcher: MdUniqueSelectionDispatcher;\n\n  beforeEachProviders(() => [\n    disableDeprecatedForms(),\n    provideForms(),\n    provide(MdUniqueSelectionDispatcher, {useFactory: () => {\n      dispatcher = new MdUniqueSelectionDispatcher();\n      return dispatcher;\n    }})\n  ]);\n\n  beforeEach(inject([TestComponentBuilder], (tcb: TestComponentBuilder) => {\n    builder = tcb;\n  }));\n\n  describe('inside of a group', () => {\n    let fixture: ComponentFixture<RadiosInsideRadioGroup>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let radioDebugElements: DebugElement[];\n    let radioNativeElements: HTMLElement[];\n    let groupInstance: MdRadioGroup;\n    let radioInstances: MdRadioButton[];\n    let testComponent: RadiosInsideRadioGroup;\n\n    beforeEach(async(() => {\n      builder.createAsync(RadiosInsideRadioGroup).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        groupDebugElement = fixture.debugElement.query(By.directive(MdRadioGroup));\n        groupNativeElement = groupDebugElement.nativeElement;\n        groupInstance = groupDebugElement.injector.get(MdRadioGroup);\n\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\n        radioNativeElements = radioDebugElements.map(debugEl => debugEl.nativeElement);\n        radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\n      });\n    }));\n\n    it('should set individual radio names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (let radio of radioInstances) {\n        expect(radio.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should disable click interaction when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      radioNativeElements[0].click();\n      expect(radioInstances[0].checked).toBe(false);\n    });\n\n    it('should set alignment based on the group alignment', () => {\n      testComponent.alignment = 'end';\n      fixture.detectChanges();\n\n      for (let radio of radioInstances) {\n        expect(radio.align).toBe('end');\n      }\n\n      testComponent.alignment = 'start';\n      fixture.detectChanges();\n\n      for (let radio of radioInstances) {\n        expect(radio.align).toBe('start');\n      }\n    });\n\n    it('should disable each individual radio when the group is disabled', () => {\n      testComponent.isGroupDisabled = true;\n      fixture.detectChanges();\n\n      for (let radio of radioInstances) {\n        expect(radio.disabled).toBe(true);\n      }\n    });\n\n    it('should update the group value when one of the radios changes', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      radioInstances[0].checked = true;\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n    });\n\n    it('should update the group and radios when one of the radios is clicked', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      radioNativeElements[0].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n      expect(radioInstances[0].checked).toBe(true);\n      expect(radioInstances[1].checked).toBe(false);\n\n      radioNativeElements[1].click();\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('water');\n      expect(groupInstance.selected).toBe(radioInstances[1]);\n      expect(radioInstances[0].checked).toBe(false);\n      expect(radioInstances[1].checked).toBe(true);\n    });\n\n    it('should check a radio upon interaction with the underlying native radio button', () => {\n      let nativeRadioInput = <HTMLElement> radioNativeElements[0].querySelector('input');\n\n      nativeRadioInput.click();\n      fixture.detectChanges();\n\n      expect(radioInstances[0].checked).toBe(true);\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n    });\n\n    it('should emit a change event from radio buttons', fakeAsync(() => {\n      expect(radioInstances[0].checked).toBe(false);\n\n      let changeSpy = jasmine.createSpy('radio change listener');\n      radioInstances[0].change.subscribe(changeSpy);\n\n      radioInstances[0].checked = true;\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalled();\n\n      radioInstances[0].checked = false;\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    it('should emit a change event from the radio group', fakeAsync(() => {\n      expect(groupInstance.value).toBeFalsy();\n\n      let changeSpy = jasmine.createSpy('radio-group change listener');\n      groupInstance.change.subscribe(changeSpy);\n\n      groupInstance.value = 'fire';\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalled();\n\n      groupInstance.value = 'water';\n      fixture.detectChanges();\n      tick();\n      expect(changeSpy).toHaveBeenCalledTimes(2);\n    }));\n\n    // TODO(jelbourn): test this in an e2e test with *real* focus, rather than faking\n    // a focus / blur event.\n    it('should focus individual radio buttons', () => {\n      let nativeRadioInput = <HTMLElement> radioNativeElements[0].querySelector('input');\n\n      expect(nativeRadioInput.classList).not.toContain('md-radio-focused');\n\n      dispatchFocusChangeEvent('focus', nativeRadioInput);\n      fixture.detectChanges();\n\n      expect(radioNativeElements[0].classList).toContain('md-radio-focused');\n\n      dispatchFocusChangeEvent('blur', nativeRadioInput);\n      fixture.detectChanges();\n\n      expect(radioNativeElements[0].classList).not.toContain('md-radio-focused');\n    });\n\n    it('should update the group and radios when updating the group value', () => {\n      expect(groupInstance.value).toBeFalsy();\n\n      testComponent.groupValue = 'fire';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('fire');\n      expect(groupInstance.selected).toBe(radioInstances[0]);\n      expect(radioInstances[0].checked).toBe(true);\n      expect(radioInstances[1].checked).toBe(false);\n\n      testComponent.groupValue = 'water';\n      fixture.detectChanges();\n\n      expect(groupInstance.value).toBe('water');\n      expect(groupInstance.selected).toBe(radioInstances[1]);\n      expect(radioInstances[0].checked).toBe(false);\n      expect(radioInstances[1].checked).toBe(true);\n    });\n\n    it('should deselect all of the checkboxes when the group value is cleared', () => {\n      radioInstances[0].checked = true;\n\n      expect(groupInstance.value).toBeTruthy();\n\n      groupInstance.value = null;\n\n      expect(radioInstances.every(radio => !radio.checked)).toBe(true);\n    });\n  });\n\n  describe('group with ngModel', () => {\n    let fixture: ComponentFixture<RadioGroupWithNgModel>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let radioDebugElements: DebugElement[];\n    let radioNativeElements: HTMLElement[];\n    let groupInstance: MdRadioGroup;\n    let radioInstances: MdRadioButton[];\n    let testComponent: RadioGroupWithNgModel;\n    let groupNgControl: NgControl;\n\n    beforeEach(async(() => {\n      builder.createAsync(RadioGroupWithNgModel).then(f => {\n        fixture = f;\n        fixture.detectChanges();\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        groupDebugElement = fixture.debugElement.query(By.directive(MdRadioGroup));\n        groupNativeElement = groupDebugElement.nativeElement;\n        groupInstance = groupDebugElement.injector.get(MdRadioGroup);\n        groupNgControl = groupDebugElement.injector.get(NgControl);\n\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\n        radioNativeElements = radioDebugElements.map(debugEl => debugEl.nativeElement);\n        radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\n      });\n    }));\n\n    it('should set individual radio names based on the group name', () => {\n      expect(groupInstance.name).toBeTruthy();\n      for (let radio of radioInstances) {\n        expect(radio.name).toBe(groupInstance.name);\n      }\n\n      groupInstance.name = 'new name';\n      for (let radio of radioInstances) {\n        expect(radio.name).toBe(groupInstance.name);\n      }\n    });\n\n    it('should check the corresponding radio button on group value change', () => {\n      expect(groupInstance.value).toBeFalsy();\n      for (let radio of radioInstances) {\n        expect(radio.checked).toBeFalsy();\n      }\n\n      groupInstance.value = 'vanilla';\n      for (let radio of radioInstances) {\n        expect(radio.checked).toBe(groupInstance.value === radio.value);\n      }\n      expect(groupInstance.selected.value).toBe(groupInstance.value);\n    });\n\n    it('should have the correct control state initially and after interaction', fakeAsync(() => {\n      // The control should start off valid, pristine, and untouched.\n      expect(groupNgControl.valid).toBe(true);\n      expect(groupNgControl.pristine).toBe(true);\n      expect(groupNgControl.touched).toBe(false);\n\n      // After changing the value programmatically, the control should become dirty (not pristine),\n      // but remain untouched.\n      radioInstances[1].checked = true;\n      fixture.detectChanges();\n      tick();\n\n      expect(groupNgControl.valid).toBe(true);\n      expect(groupNgControl.pristine).toBe(false);\n      expect(groupNgControl.touched).toBe(false);\n\n      // After a user interaction occurs (such as a click), the control should remain dirty and\n      // now also be touched.\n      radioNativeElements[2].click();\n      fixture.detectChanges();\n      tick();\n\n      expect(groupNgControl.valid).toBe(true);\n      expect(groupNgControl.pristine).toBe(false);\n      expect(groupNgControl.touched).toBe(true);\n    }));\n\n    it('should update the ngModel value when selecting a radio button', fakeAsync(() => {\n      radioInstances[1].checked = true;\n      fixture.detectChanges();\n\n      tick();\n\n      expect(testComponent.modelValue).toBe('chocolate');\n    }));\n  });\n\n  describe('group with ngModel and change event', () => {\n    let fixture: ComponentFixture<RadioGroupWithNgModel>;\n    let groupDebugElement: DebugElement;\n    let groupNativeElement: HTMLElement;\n    let radioDebugElements: DebugElement[];\n    let radioNativeElements: HTMLElement[];\n    let groupInstance: MdRadioGroup;\n    let radioInstances: MdRadioButton[];\n    let testComponent: RadioGroupWithNgModel;\n    let groupNgControl: NgControl;\n\n    beforeEach(async(() => {\n      builder.createAsync(RadioGroupWithNgModel).then(f => {\n        fixture = f;\n\n        testComponent = fixture.componentInstance;\n\n        groupDebugElement = fixture.debugElement.query(By.directive(MdRadioGroup));\n        groupNativeElement = groupDebugElement.nativeElement;\n        groupInstance = groupDebugElement.injector.get(MdRadioGroup);\n        groupNgControl = groupDebugElement.injector.get(NgControl);\n\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\n        radioNativeElements = radioDebugElements.map(debugEl => debugEl.nativeElement);\n        radioInstances = radioDebugElements.map(debugEl => debugEl.componentInstance);\n\n        fixture.detectChanges();\n      });\n    }));\n\n    it('should update the model before firing change event', fakeAsync(() => {\n      expect(testComponent.modelValue).toBeUndefined();\n      expect(testComponent.lastEvent).toBeUndefined();\n\n      groupInstance.value = 'chocolate';\n      fixture.detectChanges();\n\n      tick();\n      expect(testComponent.modelValue).toBe('chocolate');\n      expect(testComponent.lastEvent.value).toBe('chocolate');\n    }));\n  });\n\n  describe('as standalone', () => {\n    let fixture: ComponentFixture<StandaloneRadioButtons>;\n    let radioDebugElements: DebugElement[];\n    let seasonRadioInstances: MdRadioButton[];\n    let weatherRadioInstances: MdRadioButton[];\n    let fruitRadioInstances: MdRadioButton[];\n    let fruitRadioNativeInputs: HTMLElement[];\n    let testComponent: StandaloneRadioButtons;\n\n    beforeEach(async(() => {\n      builder.createAsync(StandaloneRadioButtons).then(f => {\n        let fruitRadioNativeElements: HTMLElement[];\n\n        fixture = f;\n        fixture.detectChanges();\n\n        testComponent = fixture.debugElement.componentInstance;\n\n        radioDebugElements = fixture.debugElement.queryAll(By.directive(MdRadioButton));\n        seasonRadioInstances = radioDebugElements\n            .filter(debugEl => debugEl.componentInstance.name == 'season')\n            .map(debugEl => debugEl.componentInstance);\n        weatherRadioInstances = radioDebugElements\n            .filter(debugEl => debugEl.componentInstance.name == 'weather')\n            .map(debugEl => debugEl.componentInstance);\n        fruitRadioInstances = radioDebugElements\n            .filter(debugEl => debugEl.componentInstance.name == 'fruit')\n            .map(debugEl => debugEl.componentInstance);\n\n        fruitRadioNativeElements = radioDebugElements\n            .filter(debugEl => debugEl.componentInstance.name == 'fruit')\n            .map(debugEl => debugEl.nativeElement);\n\n        fruitRadioNativeInputs = [];\n        for (let element of fruitRadioNativeElements) {\n          fruitRadioNativeInputs.push(<HTMLElement> element.querySelector('input'));\n        }\n      });\n    }));\n\n    it('should uniquely select radios by a name', () => {\n      seasonRadioInstances[0].checked = true;\n      weatherRadioInstances[1].checked = true;\n\n      fixture.detectChanges();\n      expect(seasonRadioInstances[0].checked).toBe(true);\n      expect(seasonRadioInstances[1].checked).toBe(false);\n      expect(seasonRadioInstances[2].checked).toBe(false);\n      expect(weatherRadioInstances[0].checked).toBe(false);\n      expect(weatherRadioInstances[1].checked).toBe(true);\n      expect(weatherRadioInstances[2].checked).toBe(false);\n\n      seasonRadioInstances[1].checked = true;\n      fixture.detectChanges();\n      expect(seasonRadioInstances[0].checked).toBe(false);\n      expect(seasonRadioInstances[1].checked).toBe(true);\n      expect(seasonRadioInstances[2].checked).toBe(false);\n      expect(weatherRadioInstances[0].checked).toBe(false);\n      expect(weatherRadioInstances[1].checked).toBe(true);\n      expect(weatherRadioInstances[2].checked).toBe(false);\n\n      weatherRadioInstances[2].checked = true;\n      expect(seasonRadioInstances[0].checked).toBe(false);\n      expect(seasonRadioInstances[1].checked).toBe(true);\n      expect(seasonRadioInstances[2].checked).toBe(false);\n      expect(weatherRadioInstances[0].checked).toBe(false);\n      expect(weatherRadioInstances[1].checked).toBe(false);\n      expect(weatherRadioInstances[2].checked).toBe(true);\n    });\n\n    it('should add aria-label attribute to the underlying input element if defined', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-label')).toBe('Banana');\n    });\n\n    it('should not add aria-label attribute if not defined', () => {\n      expect(fruitRadioNativeInputs[1].hasAttribute('aria-label')).toBeFalsy();\n    });\n\n    it('should change aria-label attribute if property is changed at runtime', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-label')).toBe('Banana');\n\n      fruitRadioInstances[0].ariaLabel = 'Pineapple';\n      fixture.detectChanges();\n\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-label')).toBe('Pineapple');\n    });\n\n    it('should add aria-labelledby attribute to the underlying input element if defined', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-labelledby')).toBe('xyz');\n    });\n\n    it('should not add aria-labelledby attribute if not defined', () => {\n      expect(fruitRadioNativeInputs[1].hasAttribute('aria-labelledby')).toBeFalsy();\n    });\n\n    it('should change aria-labelledby attribute if property is changed at runtime', () => {\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-labelledby')).toBe('xyz');\n\n      fruitRadioInstances[0].ariaLabelledby = 'uvw';\n      fixture.detectChanges();\n\n      expect(fruitRadioNativeInputs[0].getAttribute('aria-labelledby')).toBe('uvw');\n    });\n  });\n});\n\n\n@Component({\n  directives: [MD_RADIO_DIRECTIVES],\n  template: `\n  <md-radio-group [disabled]=\"isGroupDisabled\"\n                  [align]=\"alignment\"\n                  [value]=\"groupValue\"\n                  name=\"test-name\">\n    <md-radio-button value=\"fire\">Charmander</md-radio-button>\n    <md-radio-button value=\"water\">Squirtle</md-radio-button>\n    <md-radio-button value=\"leaf\">Bulbasaur</md-radio-button>\n  </md-radio-group>\n  `\n})\nclass RadiosInsideRadioGroup {\n  alignment: string;\n  isGroupDisabled: boolean = false;\n  groupValue: string = null;\n}\n\n\n@Component({\n  directives: [MD_RADIO_DIRECTIVES],\n  template: `\n    <md-radio-button name=\"season\" value=\"spring\">Spring</md-radio-button>\n    <md-radio-button name=\"season\" value=\"summer\">Summer</md-radio-button>\n    <md-radio-button name=\"season\" value=\"autum\">Autumn</md-radio-button>\n    \n    <md-radio-button name=\"weather\" value=\"warm\">Spring</md-radio-button>\n    <md-radio-button name=\"weather\" value=\"hot\">Summer</md-radio-button>\n    <md-radio-button name=\"weather\" value=\"cool\">Autumn</md-radio-button>\n    \n    <span id=\"xyz\">Baby Banana<span>\n    <md-radio-button name=\"fruit\" value=\"banana\" aria-label=\"Banana\" aria-labelledby=\"xyz\">\n    </md-radio-button>\n    <md-radio-button name=\"fruit\" value=\"raspberry\">Raspberry</md-radio-button>\n  `\n})\nclass StandaloneRadioButtons { }\n\n\n@Component({\n  directives: [MD_RADIO_DIRECTIVES, FORM_DIRECTIVES],\n  template: `\n  <md-radio-group [(ngModel)]=\"modelValue\" (change)=\"lastEvent = $event\">\n    <md-radio-button *ngFor=\"let option of options\" [value]=\"option.value\">\n      {{option.label}}\n    </md-radio-button>\n  </md-radio-group>\n  `\n})\nclass RadioGroupWithNgModel {\n  modelValue: string;\n  options = [\n    {label: 'Vanilla', value: 'vanilla'},\n    {label: 'Chocolate', value: 'chocolate'},\n    {label: 'Strawberry', value: 'strawberry'},\n  ];\n  lastEvent: MdRadioChange;\n}\n\n// TODO(jelbourn): remove eveything below when Angular supports faking events.\n\n/**\n * Dispatches a focus change event from an element.\n * @param eventName Name of the event, either 'focus' or 'blur'.\n * @param element The element from which the event will be dispatched.\n */\nfunction dispatchFocusChangeEvent(eventName: string, element: HTMLElement): void {\n  let event  = document.createEvent('Event');\n  event.initEvent(eventName, true, true);\n  element.dispatchEvent(event);\n}\n"]}