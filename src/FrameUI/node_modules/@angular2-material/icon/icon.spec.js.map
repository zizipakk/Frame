{"version":3,"file":"icon.spec.js","sourceRoot":"","sources":["../../Users/jelbourn/material2/tmp/broccoli_type_script_compiler-input_base_path-lnaCBdnQ.tmp/0/src/demo-app/components/icon/icon.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    it,\n    describe,\n    expect,\n    beforeEach,\n    beforeEachProviders,\n    inject,\n} from '@angular/core/testing';\nimport {TestComponentBuilder} from '@angular/compiler/testing';\nimport {HTTP_PROVIDERS, XHRBackend} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\nimport {provide, Component} from '@angular/core';\nimport {MdIcon} from './icon';\nimport {MdIconRegistry} from './icon-registry';\nimport {getFakeSvgHttpResponse} from './fake-svgs';\n\n\n\n/** Returns the CSS classes assigned to an element as a sorted array. */\nconst sortedClassNames = (elem: Element) => elem.className.split(' ').sort();\n\n/**\n * Verifies that an element contains a single <svg> child element, and returns that child.\n */\nconst verifyAndGetSingleSvgChild = (element: SVGElement): any => {\n  expect(element.childNodes.length).toBe(1);\n  const svgChild = <Element>element.childNodes[0];\n  expect(svgChild.tagName.toLowerCase()).toBe('svg');\n  return svgChild;\n};\n\n/**\n * Verifies that an element contains a single <path> child element whose \"id\" attribute has\n * the specified value.\n */\nconst verifyPathChildElement = (element: Element, attributeValue: string) => {\n  expect(element.childNodes.length).toBe(1);\n  const pathElement = <Element>element.childNodes[0];\n  expect(pathElement.tagName.toLowerCase()).toBe('path');\n  expect(pathElement.getAttribute('id')).toBe(attributeValue);\n};\n\ndescribe('MdIcon', () => {\n\n  beforeEachProviders(() => [\n    MdIconRegistry,\n    HTTP_PROVIDERS,\n    MockBackend,\n    provide(XHRBackend, {useExisting: MockBackend}),\n  ]);\n\n  let builder: TestComponentBuilder;\n  let mdIconRegistry: MdIconRegistry;\n  let httpRequestUrls: string[];\n\n  beforeEach(\n      inject([TestComponentBuilder, MdIconRegistry, MockBackend],\n      (tcb: TestComponentBuilder, mir: MdIconRegistry, mockBackend: MockBackend) => {\n    builder = tcb;\n    mdIconRegistry = mir;\n    // Keep track of requests so we can verify caching behavior.\n    // Return responses for the SVGs defined in fake-svgs.ts.\n    httpRequestUrls = [];\n    mockBackend.connections.subscribe((connection: any) => {\n      const url = connection.request.url;\n      httpRequestUrls.push(url);\n      connection.mockRespond(getFakeSvgHttpResponse(url));\n    });\n  }));\n\n  describe('Ligature icons', () => {\n    it('should add material-icons class by default', (done: () => void) => {\n      return builder.createAsync(MdIconLigatureTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        testComponent.iconName = 'home';\n        fixture.detectChanges();\n        expect(sortedClassNames(mdIconElement)).toEqual(['material-icons']);\n        done();\n      });\n    });\n\n    it('should use alternate icon font if set', (done: () => void) => {\n      mdIconRegistry.setDefaultFontSetClass('myfont');\n      return builder.createAsync(MdIconLigatureTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        testComponent.iconName = 'home';\n        fixture.detectChanges();\n        expect(sortedClassNames(mdIconElement)).toEqual(['myfont']);\n        done();\n      });\n    });\n  });\n\n  describe('Icons from URLs', () => {\n    it('should fetch SVG icon from URL and inline the content', (done: () => void) => {\n      return builder.createAsync(MdIconFromSvgUrlTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        let svgElement: any;\n\n        testComponent.iconUrl = 'cat.svg';\n        fixture.detectChanges();\n        // An <svg> element should have been added as a child of <md-icon>.\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        // Default attributes should be set.\n        expect(svgElement.getAttribute('height')).toBe('100%');\n        expect(svgElement.getAttribute('height')).toBe('100%');\n        // Make sure SVG content is taken from response.\n        verifyPathChildElement(svgElement, 'meow');\n\n        // Change the icon, and the SVG element should be replaced.\n        testComponent.iconUrl = 'dog.svg';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'woof');\n\n        expect(httpRequestUrls).toEqual(['cat.svg', 'dog.svg']);\n        // Using an icon from a previously loaded URL should not cause another HTTP request.\n        testComponent.iconUrl = 'cat.svg';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'meow');\n        expect(httpRequestUrls).toEqual(['cat.svg', 'dog.svg']);\n\n        done();\n      });\n    });\n\n    it('should register icon URLs by name', (done: () => void) => {\n      mdIconRegistry.addSvgIcon('fluffy', 'cat.svg');\n      mdIconRegistry.addSvgIcon('fido', 'dog.svg');\n      return builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        let svgElement: SVGElement;\n\n        testComponent.iconName = 'fido';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'woof');\n        // The aria label should be taken from the icon name.\n        expect(mdIconElement.getAttribute('aria-label')).toBe('fido');\n\n        // Change the icon, and the SVG element should be replaced.\n        testComponent.iconName = 'fluffy';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'meow');\n        expect(mdIconElement.getAttribute('aria-label')).toBe('fluffy');\n\n        expect(httpRequestUrls).toEqual(['dog.svg', 'cat.svg']);\n        // Using an icon from a previously loaded URL should not cause another HTTP request.\n        testComponent.iconName = 'fido';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'woof');\n        expect(httpRequestUrls).toEqual(['dog.svg', 'cat.svg']);\n\n        done();\n      });\n    });\n\n    it('should extract icon from SVG icon set', (done: () => void) => {\n      mdIconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-1.svg');\n      return builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        let svgElement: any;\n        let svgChild: any;\n\n        testComponent.iconName = 'farm:pig';\n        fixture.detectChanges();\n\n        expect(mdIconElement.childNodes.length).toBe(1);\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        expect(svgElement.childNodes.length).toBe(1);\n        svgChild = svgElement.childNodes[0];\n        // The first <svg> child should be the <g id=\"pig\"> element.\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\n        expect(svgChild.getAttribute('id')).toBe('pig');\n        verifyPathChildElement(svgChild, 'oink');\n        // The aria label should be taken from the icon name (without the icon set portion).\n        expect(mdIconElement.getAttribute('aria-label')).toBe('pig');\n\n        // Change the icon, and the SVG element should be replaced.\n        testComponent.iconName = 'farm:cow';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        svgChild = svgElement.childNodes[0];\n        // The first <svg> child should be the <g id=\"cow\"> element.\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\n        expect(svgChild.getAttribute('id')).toBe('cow');\n        verifyPathChildElement(svgChild, 'moo');\n        expect(mdIconElement.getAttribute('aria-label')).toBe('cow');\n\n        done();\n      });\n    });\n\n    it('should allow multiple icon sets in a namespace', (done: () => void) => {\n      mdIconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-1.svg');\n      mdIconRegistry.addSvgIconSetInNamespace('farm', 'farm-set-2.svg');\n      mdIconRegistry.addSvgIconSetInNamespace('arrows', 'arrow-set.svg');\n      return builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        let svgElement: any;\n        let svgChild: any;\n\n        testComponent.iconName = 'farm:pig';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        expect(svgElement.childNodes.length).toBe(1);\n        svgChild = svgElement.childNodes[0];\n        // The <svg> child should be the <g id=\"pig\"> element.\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\n        expect(svgChild.getAttribute('id')).toBe('pig');\n        expect(svgChild.childNodes.length).toBe(1);\n        verifyPathChildElement(svgChild, 'oink');\n        // The aria label should be taken from the icon name (without the namespace).\n        expect(mdIconElement.getAttribute('aria-label')).toBe('pig');\n\n        // Both icon sets registered in the 'farm' namespace should have been fetched.\n        expect(httpRequestUrls.sort()).toEqual(['farm-set-1.svg', 'farm-set-2.svg']);\n\n        // Change the icon name to one that appears in both icon sets. The icon from the set that\n        // was registered last should be used (with id attribute of 'moo moo' instead of 'moo'),\n        // and no additional HTTP request should be made.\n        testComponent.iconName = 'farm:cow';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        svgChild = svgElement.childNodes[0];\n        // The first <svg> child should be the <g id=\"cow\"> element.\n        expect(svgChild.tagName.toLowerCase()).toBe('g');\n        expect(svgChild.getAttribute('id')).toBe('cow');\n        expect(svgChild.childNodes.length).toBe(1);\n        verifyPathChildElement(svgChild, 'moo moo');\n        expect(mdIconElement.getAttribute('aria-label')).toBe('cow');\n        expect(httpRequestUrls.sort()).toEqual(['farm-set-1.svg', 'farm-set-2.svg']);\n\n        done();\n      });\n    });\n\n    it('should not wrap <svg> elements in icon sets in another svg tag', (done: () => void) => {\n      mdIconRegistry.addSvgIconSet('arrow-set.svg');\n      return builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        let svgElement: any;\n\n        testComponent.iconName = 'left-arrow';\n        fixture.detectChanges();\n        // arrow-set.svg stores its icons as nested <svg> elements, so they should be used\n        // directly and not wrapped in an outer <svg> tag like the <g> elements in other sets.\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'left');\n        expect(mdIconElement.getAttribute('aria-label')).toBe('left-arrow');\n\n        done();\n      });\n    });\n\n    it('should return unmodified copies of icons from URLs', (done: () => void) => {\n      return builder.createAsync(MdIconFromSvgUrlTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        let svgElement: any;\n\n        testComponent.iconUrl = 'cat.svg';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'meow');\n        // Modify the SVG element by setting a viewBox attribute.\n        svgElement.setAttribute('viewBox', '0 0 100 100');\n\n        // Switch to a different icon.\n        testComponent.iconUrl = 'dog.svg';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'woof');\n\n        // Switch back to the first icon. The viewBox attribute should not be present.\n        testComponent.iconUrl = 'cat.svg';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'meow');\n        expect(svgElement.getAttribute('viewBox')).toBeFalsy();\n\n        done();\n      });\n    });\n\n    it('should return unmodified copies of icons from icon sets', (done: () => void) => {\n      mdIconRegistry.addSvgIconSet('arrow-set.svg');\n      return builder.createAsync(MdIconFromSvgNameTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        let svgElement: any;\n\n        testComponent.iconName = 'left-arrow';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'left');\n        // Modify the SVG element by setting a viewBox attribute.\n        svgElement.setAttribute('viewBox', '0 0 100 100');\n\n        // Switch to a different icon.\n        testComponent.iconName = 'right-arrow';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'right');\n\n        // Switch back to the first icon. The viewBox attribute should not be present.\n        testComponent.iconName = 'left-arrow';\n        fixture.detectChanges();\n        svgElement = verifyAndGetSingleSvgChild(mdIconElement);\n        verifyPathChildElement(svgElement, 'left');\n        expect(svgElement.getAttribute('viewBox')).toBeFalsy();\n\n        done();\n      });\n    });\n  });\n\n  describe('custom fonts', () => {\n    it('should apply CSS classes for custom font and icon', (done: () => void) => {\n      mdIconRegistry.registerFontClassAlias('f1', 'font1');\n      mdIconRegistry.registerFontClassAlias('f2');\n      return builder.createAsync(MdIconCustomFontCssTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        testComponent.fontSet = 'f1';\n        testComponent.fontIcon = 'house';\n        fixture.detectChanges();\n        expect(sortedClassNames(mdIconElement)).toEqual(['font1', 'house']);\n        expect(mdIconElement.getAttribute('aria-label')).toBe('house');\n\n        testComponent.fontSet = 'f2';\n        testComponent.fontIcon = 'igloo';\n        fixture.detectChanges();\n        expect(sortedClassNames(mdIconElement)).toEqual(['f2', 'igloo']);\n        expect(mdIconElement.getAttribute('aria-label')).toBe('igloo');\n\n        testComponent.fontSet = 'f3';\n        testComponent.fontIcon = 'tent';\n        fixture.detectChanges();\n        expect(sortedClassNames(mdIconElement)).toEqual(['f3', 'tent']);\n        expect(mdIconElement.getAttribute('aria-label')).toBe('tent');\n\n        done();\n      });\n    });\n  });\n\n  describe('aria label', () => {\n    it('should set aria label from text content if not specified', (done: () => void) => {\n      return builder.createAsync(MdIconLigatureTestApp).then(fixture => {\n\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        testComponent.iconName = 'home';\n\n        fixture.detectChanges();\n        expect(mdIconElement.getAttribute('aria-label')).toBe('home');\n\n        testComponent.iconName = 'hand';\n        fixture.detectChanges();\n        expect(mdIconElement.getAttribute('aria-label')).toBe('hand');\n\n        done();\n      });\n    });\n\n    it('should use alt tag if aria label is not specified', (done: () => void) => {\n      return builder.createAsync(MdIconLigatureWithAriaBindingTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        testComponent.iconName = 'home';\n        testComponent.altText = 'castle';\n        fixture.detectChanges();\n        expect(mdIconElement.getAttribute('aria-label')).toBe('castle');\n\n        testComponent.ariaLabel = 'house';\n        fixture.detectChanges();\n        expect(mdIconElement.getAttribute('aria-label')).toBe('house');\n\n        done();\n      });\n    });\n\n    it('should use provided aria label rather than icon name', (done: () => void) => {\n      return builder.createAsync(MdIconLigatureWithAriaBindingTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        testComponent.iconName = 'home';\n        testComponent.ariaLabel = 'house';\n        fixture.detectChanges();\n        expect(mdIconElement.getAttribute('aria-label')).toBe('house');\n        done();\n      });\n    });\n\n    it('should use provided aria label rather than font icon', (done: () => void) => {\n      return builder.createAsync(MdIconCustomFontCssTestApp).then(fixture => {\n        const testComponent = fixture.debugElement.componentInstance;\n        const mdIconElement = fixture.debugElement.nativeElement.querySelector('md-icon');\n        testComponent.fontSet = 'f1';\n        testComponent.fontIcon = 'house';\n        testComponent.ariaLabel = 'home';\n        fixture.detectChanges();\n        expect(mdIconElement.getAttribute('aria-label')).toBe('home');\n        done();\n      });\n    });\n  });\n});\n\n/** Test components that contain an MdIcon. */\n@Component({\n  selector: 'test-app',\n  template: `<md-icon>{{iconName}}</md-icon>`,\n  directives: [MdIcon],\n})\nclass MdIconLigatureTestApp {\n  ariaLabel: string = null;\n  iconName = '';\n}\n\n@Component({\n  selector: 'test-app',\n  template: `<md-icon [aria-label]=\"ariaLabel\" [alt]=\"altText\">{{iconName}}</md-icon>`,\n  directives: [MdIcon],\n})\nclass MdIconLigatureWithAriaBindingTestApp {\n  ariaLabel: string = null;\n  iconName = '';\n}\n\n@Component({\n  selector: 'test-app',\n  template: `\n      <md-icon [fontSet]=\"fontSet\" [fontIcon]=\"fontIcon\" [aria-label]=\"ariaLabel\"></md-icon>\n  `,\n  directives: [MdIcon],\n})\nclass MdIconCustomFontCssTestApp {\n  ariaLabel: string = null;\n  fontSet = '';\n  fontIcon = '';\n}\n\n@Component({\n  selector: 'test-app',\n  template: `<md-icon [svgSrc]=\"iconUrl\" [aria-label]=\"ariaLabel\"></md-icon>`,\n  directives: [MdIcon],\n})\nclass MdIconFromSvgUrlTestApp {\n  ariaLabel: string = null;\n  iconUrl = '';\n}\n\n@Component({\n  selector: 'test-app',\n  template: `<md-icon [svgIcon]=\"iconName\" [aria-label]=\"ariaLabel\"></md-icon>`,\n  directives: [MdIcon],\n})\nclass MdIconFromSvgNameTestApp {\n  ariaLabel: string = null;\n  iconName = '';\n}\n"]}